Merge sort is a popular divide and conquer sorting algorithm. It splits the list into smaller sublists, sorts each sublist, and then merges them back together to form a sorted list. This algorithm is efficient for large lists, achieving a time complexity of O(n log n) in both the average and worst cases. Hereâ€™s how merge sort works step-by-step:

Steps in Merge Sort:
1. Divide: Split the list into two halves. Continue recursively dividing each half until each sublist contains only one element (a list of one element is inherently sorted).
2. Conquer (Sort and Merge): Starting from the individual elements, merge pairs of sublists together in sorted order. 
3. Repeat the merge process until all sublists are merged back into a single sorted list.

Example of Merge Sort:
Suppose you have a list: `[38, 27, 43, 3, 9, 82, 10]`

1. Divide until you reach single-element sublists:
   - `[38, 27, 43, 3, 9, 82, 10]`
   - Split into `[38, 27, 43]` and `[3, 9, 82, 10]`
   - Split further until each part is a single element:
     - `[38]`, `[27]`, `[43]`, `[3]`, `[9]`, `[82]`, `[10]`

2. Merge pairs of sublists in sorted order:
   - `[27, 38]`, `[3, 43]`, `[9, 10]`, `[82]`
   - Next, merge to form `[27, 38, 43]` and `[3, 9, 10, 82]`
   - Finally, merge `[27, 38, 43]` with `[3, 9, 10, 82]` to get `[3, 9, 10, 27, 38, 43, 82]`

The list is now fully sorted!

Advantages and Time Complexity
- Time Complexity: O(n log n) for all cases (best, average, and worst).
- Space Complexity: O(n) because it requires additional space to store the sublists during merging.
  
Merge sort is particularly useful for sorting linked lists and large datasets since it maintains O(n log n) efficiency regardless of the data's initial order.